# Where we keep track of third party dependencies and libraries
python-binance
TA-lib 
numpy
websocket_client
flask

# we can use backtrader to test out market strategies

backtrader

# Utilize websockets to obtain a live stream of data from Binance.

# To access the binance webstream data we must use the code below, which is the base end point of binance API

# wss://stream.binance.com:9443 

# To access the raw stream data from Binance, we have to append the code below to the base end point of binance API and specify which cryptocurrency we want to subscribe our stream to. For the purpose of this Wow project we will subscribe to Etherum.
# /ws/<symbol>

# In addition to subscribing to a particular stream, we also have the ability to choose the type of stream we want, we can subscribe to a trading indicator known as a kline candle stick by appending the following to the webstream line. The interval appendment allows us to determine the duration of the feed we want to recieve. 

# The argument for using candle sticks is due to its ability to capture the emotions of investors. The candle stick chart originated in Japan over 100 years before the West developed the bar and point-and-figure charts. In the 1700s, a Japanese man named Homma discovered that, while there was a link between price and the supply and demand of rice, the markets were strongly influenced by the emotions of traders.

# Candlesticks are useful when trading as they show four price points (open, close, high, and low) throughout the period of time the trader specifies.

# The length of the interval depends on our trading strategy. If we are day trading we may be interested in candle sticks that are in 15 minute interval, if we were swing trading we may be interested in longer candle sticks that are a day or more. The longer the duration allows you to see the bigger picture of where the movement is going. 

# <symbol>@kline_<interval>

# # the end result of the webstream data line would look like the below:

# wss://stream.binance.com:9443/ws/<symbol>@kline_<interval>

# # Once we have determined how to access the data stream with specificity to what we want. We have a variety of tool to access the live stream. We can utilize python, wscat, or javascript. wscat will allow us to access the stream through a command line. 

# # To access the raw stream data through wscat we must install node.js and wscat

# npm install -g wscat

# # Once we install wscat, we can run wscat to see what type of functionality we have, once we see the list of options we can select flag -c which will allow us to connect to a websocket server. Following the -c flag we use the wss://stream.binance.com:9443.

# wscat -c wss://stream.binance.com:9443/ws/ethusdt@kline_1m  

# # Once we have a live stream coming in, we can also store the data for later analysis by utilizing the following command:

# | tee dataset.txt

# # We can append tee dataset.txt to our command to save that file 

# wscat -c wss://stream.binance.com:9443/ws/ethusdt@kline_1m | tee dataset.txt

# To stop the feed you press ctrl c

# To integrate graphs in into our user interface we will utilize trading view, lightweight Charts, we are going to use realtime emulation chart

# We will utilize backtrader for backtrading to test our bot
